// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: SysInfo.proto
#ifndef GRPC_SysInfo_2eproto__INCLUDED
#define GRPC_SysInfo_2eproto__INCLUDED

#include "SysInfo.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

class SystemInfo final {
 public:
  static constexpr char const* service_full_name() {
    return "SystemInfo";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetRAMinfo(::grpc::ClientContext* context, const ::RAMRequest& request, ::RAMResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RAMResponse>> AsyncGetRAMinfo(::grpc::ClientContext* context, const ::RAMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RAMResponse>>(AsyncGetRAMinfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RAMResponse>> PrepareAsyncGetRAMinfo(::grpc::ClientContext* context, const ::RAMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RAMResponse>>(PrepareAsyncGetRAMinfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCPUutilization(::grpc::ClientContext* context, const ::CPURequest& request, ::CPUResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CPUResponse>> AsyncGetCPUutilization(::grpc::ClientContext* context, const ::CPURequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CPUResponse>>(AsyncGetCPUutilizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CPUResponse>> PrepareAsyncGetCPUutilization(::grpc::ClientContext* context, const ::CPURequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CPUResponse>>(PrepareAsyncGetCPUutilizationRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDiskUsage(::grpc::ClientContext* context, const ::DiskRequest& request, ::DiskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DiskResponse>> AsyncGetDiskUsage(::grpc::ClientContext* context, const ::DiskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DiskResponse>>(AsyncGetDiskUsageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DiskResponse>> PrepareAsyncGetDiskUsage(::grpc::ClientContext* context, const ::DiskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DiskResponse>>(PrepareAsyncGetDiskUsageRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNetworkAdapters(::grpc::ClientContext* context, const ::NetworkRequest& request, ::NetworkResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetworkResponse>> AsyncGetNetworkAdapters(::grpc::ClientContext* context, const ::NetworkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetworkResponse>>(AsyncGetNetworkAdaptersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetworkResponse>> PrepareAsyncGetNetworkAdapters(::grpc::ClientContext* context, const ::NetworkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetworkResponse>>(PrepareAsyncGetNetworkAdaptersRaw(context, request, cq));
    }
    virtual ::grpc::Status GetOsType(::grpc::ClientContext* context, const ::OsRequest& request, ::OsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OsResponse>> AsyncGetOsType(::grpc::ClientContext* context, const ::OsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OsResponse>>(AsyncGetOsTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OsResponse>> PrepareAsyncGetOsType(::grpc::ClientContext* context, const ::OsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OsResponse>>(PrepareAsyncGetOsTypeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetRAMinfo(::grpc::ClientContext* context, const ::RAMRequest* request, ::RAMResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRAMinfo(::grpc::ClientContext* context, const ::RAMRequest* request, ::RAMResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCPUutilization(::grpc::ClientContext* context, const ::CPURequest* request, ::CPUResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCPUutilization(::grpc::ClientContext* context, const ::CPURequest* request, ::CPUResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetDiskUsage(::grpc::ClientContext* context, const ::DiskRequest* request, ::DiskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDiskUsage(::grpc::ClientContext* context, const ::DiskRequest* request, ::DiskResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNetworkAdapters(::grpc::ClientContext* context, const ::NetworkRequest* request, ::NetworkResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNetworkAdapters(::grpc::ClientContext* context, const ::NetworkRequest* request, ::NetworkResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetOsType(::grpc::ClientContext* context, const ::OsRequest* request, ::OsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOsType(::grpc::ClientContext* context, const ::OsRequest* request, ::OsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RAMResponse>* AsyncGetRAMinfoRaw(::grpc::ClientContext* context, const ::RAMRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RAMResponse>* PrepareAsyncGetRAMinfoRaw(::grpc::ClientContext* context, const ::RAMRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CPUResponse>* AsyncGetCPUutilizationRaw(::grpc::ClientContext* context, const ::CPURequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CPUResponse>* PrepareAsyncGetCPUutilizationRaw(::grpc::ClientContext* context, const ::CPURequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DiskResponse>* AsyncGetDiskUsageRaw(::grpc::ClientContext* context, const ::DiskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DiskResponse>* PrepareAsyncGetDiskUsageRaw(::grpc::ClientContext* context, const ::DiskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NetworkResponse>* AsyncGetNetworkAdaptersRaw(::grpc::ClientContext* context, const ::NetworkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NetworkResponse>* PrepareAsyncGetNetworkAdaptersRaw(::grpc::ClientContext* context, const ::NetworkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::OsResponse>* AsyncGetOsTypeRaw(::grpc::ClientContext* context, const ::OsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::OsResponse>* PrepareAsyncGetOsTypeRaw(::grpc::ClientContext* context, const ::OsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetRAMinfo(::grpc::ClientContext* context, const ::RAMRequest& request, ::RAMResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RAMResponse>> AsyncGetRAMinfo(::grpc::ClientContext* context, const ::RAMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RAMResponse>>(AsyncGetRAMinfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RAMResponse>> PrepareAsyncGetRAMinfo(::grpc::ClientContext* context, const ::RAMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RAMResponse>>(PrepareAsyncGetRAMinfoRaw(context, request, cq));
    }
    ::grpc::Status GetCPUutilization(::grpc::ClientContext* context, const ::CPURequest& request, ::CPUResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CPUResponse>> AsyncGetCPUutilization(::grpc::ClientContext* context, const ::CPURequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CPUResponse>>(AsyncGetCPUutilizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CPUResponse>> PrepareAsyncGetCPUutilization(::grpc::ClientContext* context, const ::CPURequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CPUResponse>>(PrepareAsyncGetCPUutilizationRaw(context, request, cq));
    }
    ::grpc::Status GetDiskUsage(::grpc::ClientContext* context, const ::DiskRequest& request, ::DiskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DiskResponse>> AsyncGetDiskUsage(::grpc::ClientContext* context, const ::DiskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DiskResponse>>(AsyncGetDiskUsageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DiskResponse>> PrepareAsyncGetDiskUsage(::grpc::ClientContext* context, const ::DiskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DiskResponse>>(PrepareAsyncGetDiskUsageRaw(context, request, cq));
    }
    ::grpc::Status GetNetworkAdapters(::grpc::ClientContext* context, const ::NetworkRequest& request, ::NetworkResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetworkResponse>> AsyncGetNetworkAdapters(::grpc::ClientContext* context, const ::NetworkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetworkResponse>>(AsyncGetNetworkAdaptersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetworkResponse>> PrepareAsyncGetNetworkAdapters(::grpc::ClientContext* context, const ::NetworkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetworkResponse>>(PrepareAsyncGetNetworkAdaptersRaw(context, request, cq));
    }
    ::grpc::Status GetOsType(::grpc::ClientContext* context, const ::OsRequest& request, ::OsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OsResponse>> AsyncGetOsType(::grpc::ClientContext* context, const ::OsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OsResponse>>(AsyncGetOsTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OsResponse>> PrepareAsyncGetOsType(::grpc::ClientContext* context, const ::OsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OsResponse>>(PrepareAsyncGetOsTypeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetRAMinfo(::grpc::ClientContext* context, const ::RAMRequest* request, ::RAMResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRAMinfo(::grpc::ClientContext* context, const ::RAMRequest* request, ::RAMResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCPUutilization(::grpc::ClientContext* context, const ::CPURequest* request, ::CPUResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCPUutilization(::grpc::ClientContext* context, const ::CPURequest* request, ::CPUResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDiskUsage(::grpc::ClientContext* context, const ::DiskRequest* request, ::DiskResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDiskUsage(::grpc::ClientContext* context, const ::DiskRequest* request, ::DiskResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNetworkAdapters(::grpc::ClientContext* context, const ::NetworkRequest* request, ::NetworkResponse* response, std::function<void(::grpc::Status)>) override;
      void GetNetworkAdapters(::grpc::ClientContext* context, const ::NetworkRequest* request, ::NetworkResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetOsType(::grpc::ClientContext* context, const ::OsRequest* request, ::OsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOsType(::grpc::ClientContext* context, const ::OsRequest* request, ::OsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::RAMResponse>* AsyncGetRAMinfoRaw(::grpc::ClientContext* context, const ::RAMRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RAMResponse>* PrepareAsyncGetRAMinfoRaw(::grpc::ClientContext* context, const ::RAMRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CPUResponse>* AsyncGetCPUutilizationRaw(::grpc::ClientContext* context, const ::CPURequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CPUResponse>* PrepareAsyncGetCPUutilizationRaw(::grpc::ClientContext* context, const ::CPURequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DiskResponse>* AsyncGetDiskUsageRaw(::grpc::ClientContext* context, const ::DiskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DiskResponse>* PrepareAsyncGetDiskUsageRaw(::grpc::ClientContext* context, const ::DiskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NetworkResponse>* AsyncGetNetworkAdaptersRaw(::grpc::ClientContext* context, const ::NetworkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NetworkResponse>* PrepareAsyncGetNetworkAdaptersRaw(::grpc::ClientContext* context, const ::NetworkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::OsResponse>* AsyncGetOsTypeRaw(::grpc::ClientContext* context, const ::OsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::OsResponse>* PrepareAsyncGetOsTypeRaw(::grpc::ClientContext* context, const ::OsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetRAMinfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCPUutilization_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDiskUsage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNetworkAdapters_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOsType_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetRAMinfo(::grpc::ServerContext* context, const ::RAMRequest* request, ::RAMResponse* response);
    virtual ::grpc::Status GetCPUutilization(::grpc::ServerContext* context, const ::CPURequest* request, ::CPUResponse* response);
    virtual ::grpc::Status GetDiskUsage(::grpc::ServerContext* context, const ::DiskRequest* request, ::DiskResponse* response);
    virtual ::grpc::Status GetNetworkAdapters(::grpc::ServerContext* context, const ::NetworkRequest* request, ::NetworkResponse* response);
    virtual ::grpc::Status GetOsType(::grpc::ServerContext* context, const ::OsRequest* request, ::OsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRAMinfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRAMinfo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetRAMinfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRAMinfo(::grpc::ServerContext* /*context*/, const ::RAMRequest* /*request*/, ::RAMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRAMinfo(::grpc::ServerContext* context, ::RAMRequest* request, ::grpc::ServerAsyncResponseWriter< ::RAMResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCPUutilization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCPUutilization() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetCPUutilization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCPUutilization(::grpc::ServerContext* /*context*/, const ::CPURequest* /*request*/, ::CPUResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCPUutilization(::grpc::ServerContext* context, ::CPURequest* request, ::grpc::ServerAsyncResponseWriter< ::CPUResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDiskUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDiskUsage() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetDiskUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDiskUsage(::grpc::ServerContext* /*context*/, const ::DiskRequest* /*request*/, ::DiskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDiskUsage(::grpc::ServerContext* context, ::DiskRequest* request, ::grpc::ServerAsyncResponseWriter< ::DiskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNetworkAdapters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNetworkAdapters() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetNetworkAdapters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetworkAdapters(::grpc::ServerContext* /*context*/, const ::NetworkRequest* /*request*/, ::NetworkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNetworkAdapters(::grpc::ServerContext* context, ::NetworkRequest* request, ::grpc::ServerAsyncResponseWriter< ::NetworkResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOsType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOsType() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetOsType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOsType(::grpc::ServerContext* /*context*/, const ::OsRequest* /*request*/, ::OsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOsType(::grpc::ServerContext* context, ::OsRequest* request, ::grpc::ServerAsyncResponseWriter< ::OsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetRAMinfo<WithAsyncMethod_GetCPUutilization<WithAsyncMethod_GetDiskUsage<WithAsyncMethod_GetNetworkAdapters<WithAsyncMethod_GetOsType<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetRAMinfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRAMinfo() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::RAMRequest, ::RAMResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::RAMRequest* request, ::RAMResponse* response) { return this->GetRAMinfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetRAMinfo(
        ::grpc::MessageAllocator< ::RAMRequest, ::RAMResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::RAMRequest, ::RAMResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRAMinfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRAMinfo(::grpc::ServerContext* /*context*/, const ::RAMRequest* /*request*/, ::RAMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRAMinfo(
      ::grpc::CallbackServerContext* /*context*/, const ::RAMRequest* /*request*/, ::RAMResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCPUutilization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCPUutilization() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::CPURequest, ::CPUResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::CPURequest* request, ::CPUResponse* response) { return this->GetCPUutilization(context, request, response); }));}
    void SetMessageAllocatorFor_GetCPUutilization(
        ::grpc::MessageAllocator< ::CPURequest, ::CPUResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::CPURequest, ::CPUResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCPUutilization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCPUutilization(::grpc::ServerContext* /*context*/, const ::CPURequest* /*request*/, ::CPUResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCPUutilization(
      ::grpc::CallbackServerContext* /*context*/, const ::CPURequest* /*request*/, ::CPUResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDiskUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDiskUsage() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::DiskRequest, ::DiskResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::DiskRequest* request, ::DiskResponse* response) { return this->GetDiskUsage(context, request, response); }));}
    void SetMessageAllocatorFor_GetDiskUsage(
        ::grpc::MessageAllocator< ::DiskRequest, ::DiskResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::DiskRequest, ::DiskResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDiskUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDiskUsage(::grpc::ServerContext* /*context*/, const ::DiskRequest* /*request*/, ::DiskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDiskUsage(
      ::grpc::CallbackServerContext* /*context*/, const ::DiskRequest* /*request*/, ::DiskResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNetworkAdapters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNetworkAdapters() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::NetworkRequest, ::NetworkResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::NetworkRequest* request, ::NetworkResponse* response) { return this->GetNetworkAdapters(context, request, response); }));}
    void SetMessageAllocatorFor_GetNetworkAdapters(
        ::grpc::MessageAllocator< ::NetworkRequest, ::NetworkResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::NetworkRequest, ::NetworkResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNetworkAdapters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetworkAdapters(::grpc::ServerContext* /*context*/, const ::NetworkRequest* /*request*/, ::NetworkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNetworkAdapters(
      ::grpc::CallbackServerContext* /*context*/, const ::NetworkRequest* /*request*/, ::NetworkResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetOsType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetOsType() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::OsRequest, ::OsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::OsRequest* request, ::OsResponse* response) { return this->GetOsType(context, request, response); }));}
    void SetMessageAllocatorFor_GetOsType(
        ::grpc::MessageAllocator< ::OsRequest, ::OsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::OsRequest, ::OsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetOsType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOsType(::grpc::ServerContext* /*context*/, const ::OsRequest* /*request*/, ::OsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOsType(
      ::grpc::CallbackServerContext* /*context*/, const ::OsRequest* /*request*/, ::OsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetRAMinfo<WithCallbackMethod_GetCPUutilization<WithCallbackMethod_GetDiskUsage<WithCallbackMethod_GetNetworkAdapters<WithCallbackMethod_GetOsType<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetRAMinfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRAMinfo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetRAMinfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRAMinfo(::grpc::ServerContext* /*context*/, const ::RAMRequest* /*request*/, ::RAMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCPUutilization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCPUutilization() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetCPUutilization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCPUutilization(::grpc::ServerContext* /*context*/, const ::CPURequest* /*request*/, ::CPUResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDiskUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDiskUsage() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetDiskUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDiskUsage(::grpc::ServerContext* /*context*/, const ::DiskRequest* /*request*/, ::DiskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNetworkAdapters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNetworkAdapters() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetNetworkAdapters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetworkAdapters(::grpc::ServerContext* /*context*/, const ::NetworkRequest* /*request*/, ::NetworkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOsType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOsType() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetOsType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOsType(::grpc::ServerContext* /*context*/, const ::OsRequest* /*request*/, ::OsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRAMinfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRAMinfo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetRAMinfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRAMinfo(::grpc::ServerContext* /*context*/, const ::RAMRequest* /*request*/, ::RAMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRAMinfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCPUutilization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCPUutilization() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetCPUutilization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCPUutilization(::grpc::ServerContext* /*context*/, const ::CPURequest* /*request*/, ::CPUResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCPUutilization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDiskUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDiskUsage() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetDiskUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDiskUsage(::grpc::ServerContext* /*context*/, const ::DiskRequest* /*request*/, ::DiskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDiskUsage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNetworkAdapters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNetworkAdapters() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetNetworkAdapters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetworkAdapters(::grpc::ServerContext* /*context*/, const ::NetworkRequest* /*request*/, ::NetworkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNetworkAdapters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOsType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOsType() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetOsType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOsType(::grpc::ServerContext* /*context*/, const ::OsRequest* /*request*/, ::OsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOsType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRAMinfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRAMinfo() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRAMinfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRAMinfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRAMinfo(::grpc::ServerContext* /*context*/, const ::RAMRequest* /*request*/, ::RAMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRAMinfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCPUutilization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCPUutilization() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCPUutilization(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCPUutilization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCPUutilization(::grpc::ServerContext* /*context*/, const ::CPURequest* /*request*/, ::CPUResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCPUutilization(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDiskUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDiskUsage() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDiskUsage(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDiskUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDiskUsage(::grpc::ServerContext* /*context*/, const ::DiskRequest* /*request*/, ::DiskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDiskUsage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNetworkAdapters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNetworkAdapters() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNetworkAdapters(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNetworkAdapters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetworkAdapters(::grpc::ServerContext* /*context*/, const ::NetworkRequest* /*request*/, ::NetworkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNetworkAdapters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetOsType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetOsType() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOsType(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetOsType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOsType(::grpc::ServerContext* /*context*/, const ::OsRequest* /*request*/, ::OsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOsType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRAMinfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRAMinfo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::RAMRequest, ::RAMResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::RAMRequest, ::RAMResponse>* streamer) {
                       return this->StreamedGetRAMinfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRAMinfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRAMinfo(::grpc::ServerContext* /*context*/, const ::RAMRequest* /*request*/, ::RAMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRAMinfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RAMRequest,::RAMResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCPUutilization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCPUutilization() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CPURequest, ::CPUResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::CPURequest, ::CPUResponse>* streamer) {
                       return this->StreamedGetCPUutilization(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCPUutilization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCPUutilization(::grpc::ServerContext* /*context*/, const ::CPURequest* /*request*/, ::CPUResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCPUutilization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CPURequest,::CPUResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDiskUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDiskUsage() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::DiskRequest, ::DiskResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::DiskRequest, ::DiskResponse>* streamer) {
                       return this->StreamedGetDiskUsage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDiskUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDiskUsage(::grpc::ServerContext* /*context*/, const ::DiskRequest* /*request*/, ::DiskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDiskUsage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DiskRequest,::DiskResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNetworkAdapters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNetworkAdapters() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::NetworkRequest, ::NetworkResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::NetworkRequest, ::NetworkResponse>* streamer) {
                       return this->StreamedGetNetworkAdapters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNetworkAdapters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNetworkAdapters(::grpc::ServerContext* /*context*/, const ::NetworkRequest* /*request*/, ::NetworkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNetworkAdapters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NetworkRequest,::NetworkResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOsType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOsType() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::OsRequest, ::OsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::OsRequest, ::OsResponse>* streamer) {
                       return this->StreamedGetOsType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOsType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOsType(::grpc::ServerContext* /*context*/, const ::OsRequest* /*request*/, ::OsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOsType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::OsRequest,::OsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetRAMinfo<WithStreamedUnaryMethod_GetCPUutilization<WithStreamedUnaryMethod_GetDiskUsage<WithStreamedUnaryMethod_GetNetworkAdapters<WithStreamedUnaryMethod_GetOsType<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetRAMinfo<WithStreamedUnaryMethod_GetCPUutilization<WithStreamedUnaryMethod_GetDiskUsage<WithStreamedUnaryMethod_GetNetworkAdapters<WithStreamedUnaryMethod_GetOsType<Service > > > > > StreamedService;
};


#endif  // GRPC_SysInfo_2eproto__INCLUDED
