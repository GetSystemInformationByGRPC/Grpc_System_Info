// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: SysInfo.proto

#include "SysInfo.pb.h"
#include "SysInfo.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* SystemInfo_method_names[] = {
  "/SystemInfo/GetRAMinfo",
  "/SystemInfo/GetCPUutilization",
  "/SystemInfo/GetDiskUsage",
  "/SystemInfo/GetNetworkAdapters",
  "/SystemInfo/GetOsType",
};

std::unique_ptr< SystemInfo::Stub> SystemInfo::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SystemInfo::Stub> stub(new SystemInfo::Stub(channel, options));
  return stub;
}

SystemInfo::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetRAMinfo_(SystemInfo_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCPUutilization_(SystemInfo_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDiskUsage_(SystemInfo_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNetworkAdapters_(SystemInfo_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOsType_(SystemInfo_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SystemInfo::Stub::GetRAMinfo(::grpc::ClientContext* context, const ::Empty& request, ::RAMResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Empty, ::RAMResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRAMinfo_, context, request, response);
}

void SystemInfo::Stub::async::GetRAMinfo(::grpc::ClientContext* context, const ::Empty* request, ::RAMResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Empty, ::RAMResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRAMinfo_, context, request, response, std::move(f));
}

void SystemInfo::Stub::async::GetRAMinfo(::grpc::ClientContext* context, const ::Empty* request, ::RAMResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRAMinfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RAMResponse>* SystemInfo::Stub::PrepareAsyncGetRAMinfoRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RAMResponse, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRAMinfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RAMResponse>* SystemInfo::Stub::AsyncGetRAMinfoRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRAMinfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SystemInfo::Stub::GetCPUutilization(::grpc::ClientContext* context, const ::Empty& request, ::CPUResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Empty, ::CPUResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCPUutilization_, context, request, response);
}

void SystemInfo::Stub::async::GetCPUutilization(::grpc::ClientContext* context, const ::Empty* request, ::CPUResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Empty, ::CPUResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCPUutilization_, context, request, response, std::move(f));
}

void SystemInfo::Stub::async::GetCPUutilization(::grpc::ClientContext* context, const ::Empty* request, ::CPUResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCPUutilization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CPUResponse>* SystemInfo::Stub::PrepareAsyncGetCPUutilizationRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CPUResponse, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCPUutilization_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CPUResponse>* SystemInfo::Stub::AsyncGetCPUutilizationRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCPUutilizationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SystemInfo::Stub::GetDiskUsage(::grpc::ClientContext* context, const ::Empty& request, ::DiskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Empty, ::DiskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDiskUsage_, context, request, response);
}

void SystemInfo::Stub::async::GetDiskUsage(::grpc::ClientContext* context, const ::Empty* request, ::DiskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Empty, ::DiskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDiskUsage_, context, request, response, std::move(f));
}

void SystemInfo::Stub::async::GetDiskUsage(::grpc::ClientContext* context, const ::Empty* request, ::DiskResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDiskUsage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DiskResponse>* SystemInfo::Stub::PrepareAsyncGetDiskUsageRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DiskResponse, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDiskUsage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DiskResponse>* SystemInfo::Stub::AsyncGetDiskUsageRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDiskUsageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SystemInfo::Stub::GetNetworkAdapters(::grpc::ClientContext* context, const ::Empty& request, ::NetworkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Empty, ::NetworkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNetworkAdapters_, context, request, response);
}

void SystemInfo::Stub::async::GetNetworkAdapters(::grpc::ClientContext* context, const ::Empty* request, ::NetworkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Empty, ::NetworkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNetworkAdapters_, context, request, response, std::move(f));
}

void SystemInfo::Stub::async::GetNetworkAdapters(::grpc::ClientContext* context, const ::Empty* request, ::NetworkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNetworkAdapters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::NetworkResponse>* SystemInfo::Stub::PrepareAsyncGetNetworkAdaptersRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::NetworkResponse, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNetworkAdapters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::NetworkResponse>* SystemInfo::Stub::AsyncGetNetworkAdaptersRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNetworkAdaptersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SystemInfo::Stub::GetOsType(::grpc::ClientContext* context, const ::Empty& request, ::OsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Empty, ::OsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOsType_, context, request, response);
}

void SystemInfo::Stub::async::GetOsType(::grpc::ClientContext* context, const ::Empty* request, ::OsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Empty, ::OsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOsType_, context, request, response, std::move(f));
}

void SystemInfo::Stub::async::GetOsType(::grpc::ClientContext* context, const ::Empty* request, ::OsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOsType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::OsResponse>* SystemInfo::Stub::PrepareAsyncGetOsTypeRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::OsResponse, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOsType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::OsResponse>* SystemInfo::Stub::AsyncGetOsTypeRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOsTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

SystemInfo::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SystemInfo_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SystemInfo::Service, ::Empty, ::RAMResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SystemInfo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Empty* req,
             ::RAMResponse* resp) {
               return service->GetRAMinfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SystemInfo_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SystemInfo::Service, ::Empty, ::CPUResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SystemInfo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Empty* req,
             ::CPUResponse* resp) {
               return service->GetCPUutilization(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SystemInfo_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SystemInfo::Service, ::Empty, ::DiskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SystemInfo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Empty* req,
             ::DiskResponse* resp) {
               return service->GetDiskUsage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SystemInfo_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SystemInfo::Service, ::Empty, ::NetworkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SystemInfo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Empty* req,
             ::NetworkResponse* resp) {
               return service->GetNetworkAdapters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SystemInfo_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SystemInfo::Service, ::Empty, ::OsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SystemInfo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Empty* req,
             ::OsResponse* resp) {
               return service->GetOsType(ctx, req, resp);
             }, this)));
}

SystemInfo::Service::~Service() {
}

::grpc::Status SystemInfo::Service::GetRAMinfo(::grpc::ServerContext* context, const ::Empty* request, ::RAMResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SystemInfo::Service::GetCPUutilization(::grpc::ServerContext* context, const ::Empty* request, ::CPUResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SystemInfo::Service::GetDiskUsage(::grpc::ServerContext* context, const ::Empty* request, ::DiskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SystemInfo::Service::GetNetworkAdapters(::grpc::ServerContext* context, const ::Empty* request, ::NetworkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SystemInfo::Service::GetOsType(::grpc::ServerContext* context, const ::Empty* request, ::OsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


